
name: Run a checkpoint sync test
description: Runs a consensus client and checkpoint syncs from the running checkpointz instance.

inputs:
  consensus:
    description: "The name of the consensus client to use (one of lighthouse, teku, prysm, nimbus, lodestar)."
    required: true
  network:
    description: "The name of the network to run the test against (one of ropsten, sepolia, prater/goerli)."
    required: true


runs:
  using: composite
  steps:
    - uses: actions/checkout@v3
    - name: Prepare environment
      shell: bash
      run: |
        mkdir $HOME/bin;
        export PATH=$HOME/bin:$PATH;
        echo "Running against ${{ inputs.network }} with ${{ inputs.consensus }}.";
    - name: Build checkpointz
      shell: bash
      run: |
        docker build . -t ethpandaops/checkpointz:local;
    - name: Configure checkpointz
      shell: bash
      run: |
        beacon_node=""
        if [[ ${{ inputs.network }} == "mainnet" ]]; then
          beacon_node="http://testing.mainnet.beacon-api.nimbus.team/"
        elif [[ ${{ inputs.network }} == "holesky" ]]; then
          beacon_node="http://testing.holesky.beacon-api.nimbus.team/"
        else
          echo "Unsupported network: ${{ inputs.network }}"
          exit 1
        fi

        cat <<EOF > checkpointz.yaml
        global:
          listenAddr: ":5555"
          logging: "debug" # panic,fatal,warm,info,debug,trace

        beacon:
          upstreams:
          - name: state-provider
            address: $beacon_node
            timeoutSeconds: 30
            dataProvider: true
        checkpointz:
          mode: full
          caches:
            blocks:
              max_items: 500
            states:
              max_items: 5
          historical_epoch_count: 5
        EOF
    - name: Create log directories
      shell: bash
      run: |
        mkdir -p logs;
    - name: Create docker network
      shell: bash
      run: |
        docker network create eth
    - name: Run checkpointz
      shell: bash
      run: |
        echo "Starting checkpointz...";
        docker run -d --network eth -p 5555:5555 -v $(pwd):/data --name checkpointz ethpandaops/checkpointz:local --config /data/checkpointz.yaml;
        docker logs checkpointz -f &> logs/checkpointz.log &
        docker logs checkpointz -f &
        echo "Checkpointz is running.";
    - name: Wait for checkpointz to have a finalized checkpoint
      shell: bash
      run: |
        echo "Waiting for checkpointz to have a finalized checkpoint...";
        bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:5555/eth/v1/beacon/states/finalized/finality_checkpoints)" != "200" ]]; do sleep 1; done';
        echo "Checkpointz has a finalized checkpoint.";
    - name: Wait for checkpointz to have the genesis block
      shell: bash
      run: |
        echo "Waiting for checkpointz to have the genesis block...";
        bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:5555/eth/v2/beacon/blocks/0)" != "200" ]]; do sleep 1; done';
        echo "Checkpointz has the genesis block.";
    - name: Manually check endpoints
      shell: bash
      run: |
        set +e
        check_endpoint() {
          local path=$1
          local accept_header=$2
          local response=$(curl -s -w "\n%{http_code}" -H "accept: ${accept_header}" "localhost:5555${path}" | tr -d '\0')
          local http_code=$(echo "$response" | tail -n1)
          local json_response=$(echo "$response" | sed '$d')
          if [[ $http_code -ge 200 && $http_code -lt 300 ]]; then
            echo $json_response
            return 0
          else
            echo "Endpoint ${path} with accept header ${accept_header} is not available."
            return 1
          fi
        }
        fails=0

        while true; do
          if [[ $fails -gt 0 ]]; then
            echo "Failed $fails times, retrying..."
            sleep 1;
          fi
          fails=$((fails+1))
          
          echo "Checking endpoint /eth/v2/beacon/blocks/genesis with accept header application/json..."
          genesis_block=$(check_endpoint "/eth/v2/beacon/blocks/genesis" "application/json")
          [[ $? -ne 0 ]] && continue
          echo "Genesis block is available."

          echo "Checking endpoint /eth/v2/debug/beacon/states/genesis with accept header application/octet-stream..."
          genesis_state=$(check_endpoint "/eth/v2/debug/beacon/states/genesis" "application/octet-stream")
          [[ $? -ne 0 ]] && continue
          echo "Genesis state is available."

          echo "Checking endpoint /eth/v2/debug/beacon/states/finalized with accept header application/octet-stream..."
          finalized_state=$(check_endpoint "/eth/v2/debug/beacon/states/finalized" "application/octet-stream")
          [[ $? -ne 0 ]] && continue
          echo "Finalized state is available."

          echo "Checking endpoint /eth/v1/beacon/states/finalized/finality_checkpoints with accept header application/json..."
          finality_checkpoints=$(check_endpoint "/eth/v1/beacon/states/finalized/finality_checkpoints" "application/json")
          if [[ $? -ne 0 ]]; then
            echo "Finality checkpoints endpoint is not available."
            continue
          fi
          echo "Finality checkpoints endpoint is available."

          finalized_root=$(echo $finality_checkpoints | jq -r '.data.finalized.root')
          if [[ -z "$finalized_root" ]]; then
            echo "Failed to extract finalized root from the finality checkpoints."
            continue
          fi
          echo "Extracted finalized root: $finalized_root"

          echo "Checking endpoint /eth/v2/beacon/blocks/$finalized_root with accept header application/json..."
          finalized_block=$(check_endpoint "/eth/v2/beacon/blocks/$finalized_root" "application/json")
          [[ $? -ne 0 ]] && continue
          echo "Finalized block is available."

          finalized_state_root=$(echo $finalized_block | jq -r '.data.message.state_root')
          if [[ -z "$finalized_state_root" ]]; then
            echo "Failed to extract finalized state root from the finalized block."
            continue
          fi
          echo "Extracted finalized state root: $finalized_state_root"

          echo "Checking endpoint /eth/v2/debug/beacon/states/$finalized_state_root with accept header application/octet-stream..."
          finalized_state=$(check_endpoint "/eth/v2/debug/beacon/states/$finalized_state_root" "application/octet-stream")
          [[ $? -ne 0 ]] && continue
          echo "Finalized state is available."

          echo "Fetching slot from /eth/v2/beacon/blocks/$finalized_root..."
          finalized_slot=$(echo $finalized_block | jq -r '.data.message.slot')
          if [[ -z "$finalized_slot" ]]; then
            echo "Failed to extract slot from the finalized block."
            continue
          fi
          echo "Extracted slot: $finalized_slot"

          echo "Checking endpoint /eth/v2/beacon/blocks/$finalized_slot with accept header application/json..."
          block=$(check_endpoint "/eth/v2/beacon/blocks/$finalized_slot" "application/json")
          [[ $? -ne 0 ]] && continue
          echo "Block for finalized slot $finalized_slot is available."

          echo "Checking endpoint /eth/v2/beacon/blocks/finalized with accept header application/json..."
          finalized_block_via_finalized=$(check_endpoint "/eth/v2/beacon/blocks/finalized" "application/json")
          [[ $? -ne 0 ]] && continue
          echo "Finalized block via 'finalized' endpoint is available."

          echo "All endpoints are available."
          break;
        done;
    - name: Run teku client
      shell: bash
      if:  ${{ inputs.consensus == 'teku' }}
      run: |
        echo "Starting Teku...";
        docker run -p 5052:5052 -d --name beacon --network eth -e TEKU_REST_API_ENABLED=true -e TEKU_P2P_PORT=9000 consensys/teku:latest --rest-api-port=5052 --network=${{ inputs.network }} --log-destination=CONSOLE --initial-state=http://checkpointz:5555/eth/v2/debug/beacon/states/finalized --ee-endpoint=http://102.10.10.1:8545
        echo "Teku is running.";
    - name: Run lighthouse client
      shell: bash
      if:  ${{ inputs.consensus == 'lighthouse' }}
      run: |
        echo "Starting Lighthouse...";
        docker run -p 5052:5052 --network eth -d --name beacon sigp/lighthouse:latest lighthouse bn --network=${{ inputs.network }} --datadir=/data --checkpoint-sync-url=http://checkpointz:5555 --http --http-address=0.0.0.0 
        echo "Lighthouse is running.";
    - name: Run prysm
      shell: bash
      if:  ${{ inputs.consensus == 'prysm' }}
      run: |
        echo "Starting prysm...";
        docker run -d --name beacon --network eth -p 5052:5052 gcr.io/prysmaticlabs/prysm/beacon-chain:latest --datadir=/data --accept-terms-of-use --${{ inputs.network }} --clear-db --grpc-gateway-port=5052 --grpc-gateway-host=0.0.0.0 --execution-endpoint=http://localhost:8545 --force-clear-db --checkpoint-sync-url=http://checkpointz:5555 --genesis-beacon-api-url=http://checkpointz:5555 --grpc-gateway-port=5052
        echo "Prysm is running.";
    - name: Run nimbus
      shell: bash
      if:  ${{ inputs.consensus == 'nimbus' }}
      run: |
        echo "Starting nimbus...";
        docker run --name beacon --network eth statusim/nimbus-eth2:amd64-latest trustedNodeSync --network=${{ inputs.network }} --trusted-node-url=http://checkpointz:5555 --backfill=false
        echo "Nimbus is running.";
    - name: Run lodestar
      shell: bash
      if:  ${{ inputs.consensus == 'lodestar' }}
      run: |
        echo "Starting lodestar...";
        docker run --name beacon -d --network eth -p 5052:5052 chainsafe/lodestar beacon --dataDir /data --network ${{ inputs.network }} --checkpointSyncUrl=http://checkpointz:5555  --rest --rest.address 0.0.0.0  --rest.port=5052
        echo "Lodestar is running.";
    - name: Wait for consensus client to have checkpoint synced
      shell: bash
      if:  ${{ inputs.consensus != 'nimbus' }}
      run: |
        docker logs beacon -f &> logs/consensus.log &
        docker logs beacon -f &
        while true; do
          if [[ $(curl -s localhost:5052/eth/v1/node/syncing | jq '.data.head_slot|tonumber') -gt 1000 ]]; then 
            break;
          fi
          sleep 1;
        done;
    - uses: actions/upload-artifact@v3
      if: ${{ always() }}
      with:
        name: ${{ inputs.network }}-${{ inputs.consensus }}-checkpointz.log
        path: logs/checkpointz.log
    - uses: actions/upload-artifact@v3
      if: ${{ always() }}
      with:
        name: ${{ inputs.network }}-${{ inputs.consensus }}-consensus.log
        path: logs/consensus.log